name: Build

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: ["actions*"]
    tags: ["*"]

jobs:
  build:
    strategy:
      matrix:
        runner: [windows-large, macos-12-xl]
        configuration: [Release]
        addrsize: [64]
        python-version: ["3.11"]
        developer_dir: ["", "/Applications/Xcode_14.0.1.app/Contents/Developer"]
        exclude:
          - runner: windows-large
            developer_dir: "/Applications/Xcode_14.0.1.app/Contents/Developer"
          ## nat 2023-07-07: trying to resolve the Windows Python permissions
          ## problem; don't bother running Mac builds.
          - runner: macos-12-xl
    runs-on: ${{ matrix.runner }}
    env:
      AUTOBUILD_ADDRSIZE: ${{ matrix.addrsize }}
      AUTOBUILD_BUILD_ID: ${{ github.run_id }}
      # authorizes fetching private constituent packages
      AUTOBUILD_GITHUB_TOKEN: ${{ secrets.SHARED_AUTOBUILD_GITHUB_TOKEN }}
      AUTOBUILD_INSTALLABLE_CACHE: ${{ github.workspace }}/.autobuild-installables
      AUTOBUILD_VARIABLES_FILE: ${{ github.workspace }}/.build-variables/variables
      AUTOBUILD_VSVER: "170"
      DEVELOPER_DIR: ${{ matrix.developer_dir }}
      # Ensure that viewer builds engage Bugsplat.
      BUGSPLAT_DB: "SecondLife_Viewer_2018"
      BUGSPLAT_PASS: ${{ secrets.BUGSPLAT_PASS }}
      BUGSPLAT_USER: ${{ secrets.BUGSPLAT_USER }}
      build_coverity: false
      build_log_dir: ${{ github.workspace }}/.logs
      build_viewer: true
      BUILDSCRIPTS_SHARED: ${{ github.workspace }}/.shared
      # extracted and committed to viewer repo
      BUILDSCRIPTS_SUPPORT_FUNCTIONS: ${{ github.workspace }}/buildscripts_support_functions
      GIT_REF: ${{ github.head_ref || github.ref }}
      LL_SKIP_REQUIRE_SYSROOT: 1
      # Setting this variable directs Linden's TUT test driver code to capture
      # test-program log output at the specified level, but to display it only if
      # the individual test fails.
      LOGFAIL: DEBUG
      master_message_template_checkout: ${{ github.workspace }}/.master-message-template
      # Only set variants to the one configuration: don't let build.sh loop
      # over variants, let GitHub distribute variants over multiple hosts.
      variants: ${{ matrix.configuration }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          ref: ${{ github.event.pull_request.head.sha || github.sha }}

      - name: Setup python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Checkout build variables
        uses: actions/checkout@v3
        with:
          repository: secondlife/build-variables
          ref: viewer
          path: .build-variables

      - name: Checkout master-message-template
        uses: actions/checkout@v3
        with:
          repository: secondlife/master-message-template
          path: .master-message-template

      - name: Install autobuild
        run: pip3 install autobuild llsd

      - name: Cache autobuild packages
        uses: actions/cache@v3
        id: cache-installables
        with:
          path: .autobuild-installables
          key: ${{ runner.os }}-${{ matrix.addrsize }}-${{ matrix.configuration }}-${{ hashFiles('autobuild.xml') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.addrsize }}-${{ matrix.configuration }}-
            ${{ runner.os }}-${{ matrix.addrsize }}-

      - name: Install windows dependencies
        if: runner.os == 'Windows'
        run: choco install nsis-unicode

      - name: Build
        id: build
        shell: bash
        env:
          RUNNER_OS: ${{ runner.os }}
        run: |
          # set up things the viewer's build.sh script expects
          mkdir -p "$build_log_dir"
          mkdir -p "$BUILDSCRIPTS_SHARED/packages/lib/python"
          source "$BUILDSCRIPTS_SUPPORT_FUNCTIONS"
          if [[ "$OSTYPE" == "cygwin" ]]
          then
            native_path() { cygpath --windows "$1"; }
            shell_path()  { cygpath --unix "$1"; }
          else
            native_path() { echo "$1"; }
            shell_path()  { echo "$1"; }
          fi
          finalize()
          {
            case "$1" in
              true|0)
                record_success "Build Succeeded"
                ;;
              *)
                record_failure "Build Failed with $1"
                ;;
            esac
          }
          initialize_build()
          {
            echo "initialize_build"
          }
          initialize_version()
          {
            export revision="$AUTOBUILD_BUILD_ID"
          }
          python_cmd()
          {
              if [[ "x${1:0:1}" == "x-" ]]    # -m, -c, etc.
              then # if $1 is a switch, don't try to twiddle paths
                   "$(shell_path "$PYTHON_COMMAND")" "$@"
              elif [[ "$(basename "$1")" == "codeticket.py" ]]
              then # ignore any attempt to contact codeticket
                   echo "## $@"
              else # running a script at an explicit path: fix path for Python
                   local script="$1"
                   shift
                   "$(shell_path "$PYTHON_COMMAND")" "$(native_path "$script")" "$@"
              fi
          }
          repo_branch()
          {
            git -C "$1" branch | grep '^* ' | cut -c 3-
          }
          record_dependencies_graph()
          {
            echo "TODO: generate and post dependency graph"
          }
          # Since we're not uploading to codeticket, DO NOT sleep for minutes.
          sleep()
          {
            echo "Not sleeping for $1 seconds"
          }
          export -f native_path shell_path finalize initialize_build initialize_version
          export -f python_cmd repo_branch record_dependencies_graph sleep
          export APR_LOG="${RUNNER_TEMP}/apr.log"
          export arch=$(uname | cut -b-6)
          # Surprise! GH Windows runner's MINGW6 is a $arch value we've never
          # seen before, so numerous tests don't know about it.
          [[ "$arch" == "MINGW6" ]] && arch=CYGWIN
          export AUTOBUILD="$(which autobuild)"
          # Build with a tag like "Second Life Project Shiny:abcdef0" to get a
          # viewer channel "Second Life Project Shiny" (ignoring ":hash",
          # needed to disambiguate tags).
          if [[ "${GIT_REF:0:12}" == "Second Life " ]]
          then export viewer_channel="${GIT_REF%:*}"
          else export viewer_channel="Second Life Test"
          fi

          # On windows we need to point the build to the correct python
          # as neither CMake's FindPython nor our custom Python.cmake module
          # will resolve the correct interpreter location.
          if [[ "$RUNNER_OS" == "Windows" ]]; then
            ##export PYTHON="$(native_path "$(which python)")"
            ## Weirdly, on GitHub's Windows runners, the integration test that
            ## runs just 'python' succeeds while the integration tests that
            ## run the full path to the .exe fail with "Access is denied."
            export PYTHON=python
            echo "Python location: $PYTHON"
            export PYTHON_COMMAND="$PYTHON"
          else
            export PYTHON_COMMAND="python3"
          fi
          export PYTHON_COMMAND_NATIVE="$(native_path "$PYTHON_COMMAND")"

          ./build.sh

          # Each artifact is downloaded as a distinct .zip file. Multiple jobs
          # (per the matrix above) writing the same filepath to the same
          # artifact name will *overwrite* that file. Moreover, they can
          # interfere with each other, causing the upload to fail.
          # https://github.com/actions/upload-artifact#uploading-to-the-same-artifact
          # Given the size of our installers, and the fact that we typically
          # only want to download just one instead of a single zip containing
          # several, generate a distinct artifact name for each installer.
          # Since the matrix above can run multiple builds on the same
          # platform, we must disambiguate on more than the platform name.
          # If we were still running Windows 32-bit builds, we'd need to
          # qualify the artifact with bit width.
          # DEVELOPER_DIR="/Applications/Xcode_14.0.1.app/Contents/Developer"
          # or the empty string, so this produces dev="Xcode_14.0.1" or ".".
          dev="$(basename "$(dirname "$(dirname "$DEVELOPER_DIR")")" .app)"
          artifact="$RUNNER_OS $dev"
          # For empty DEVELOPER_DIR, dev is ".", so artifact can end up with
          # appended " ." -- ditch that if present.
          artifact="${artifact% .}"
          echo "artifact=$artifact" >> $GITHUB_OUTPUT

      - name: Upload installer
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.build.outputs.artifact }} installer"
          # emitted by build.sh, possibly multiple lines
          path: |
            ${{ steps.build.outputs.installer }}

      # The other upload of nontrivial size is the symbol file. Use a distinct
      # artifact for that too.
      - name: Upload symbol file
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.build.outputs.artifact }} symbols"
          path: |
            ${{ steps.build.outputs.symbolfile }}

      - name: Upload metadata
        uses: actions/upload-artifact@v3
        with:
          name: "${{ steps.build.outputs.artifact }} metadata"
          # emitted by build.sh, possibly multiple lines
          path: |
            ${{ steps.build.outputs.metadata }}
